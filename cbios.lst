0001   0000             ;----------------------------------------------------------------
0002   0000             ;
0003   0000             ;	CP/M ver. 2.2 bios for sbc z80 board
0004   0000             ;	NCR5380 SCSI NS16550 serial
0005   0000             ;	J.C.Lang 12/15/2017
0006   0000             ;
0007   0000             ;	7/27/2020 fixed warms to not clear user number
0008   0000             ;----------------------------------------------------------------
0009   0000             	.page
0010   0000             	.title "CP/M Version 2.2 bios"
0011   0000             ;
0012   0000             sysdsk	.equ	2		;system disk (C:)
0013   0000             ;
0014   0000             ccp	.equ	0dc00h		;base of ccp
0015   0000             bdos	.equ	0e406h		;bdos entry
0016   0000             bios	.equ	0f200h		;base of bios
0017   0000             curdsk	.equ	0004h		;address of current disk number
0018   0000             iobyte	.equ	0003h		;intel i/o byte
0019   0000             disks	.equ	04h		;number of disks in the system
0020   0000             ;
0021   F200             	.org	bios		;origin of this program
0022   F200             nsects	.equ	($-ccp)/512	;warm start sector count
0023   F200             
0024   F200             ;----------------------------------------------------------------
0025   F200             ;io port addresses
0026   F200             ;----------------------------------------------------------------
0027   F200             uart    .equ    $80		;NS16550 base address
0028   F200             scsi    .equ    $88		;NCR5380 base address
0029   F200             ;
0030   F200             ;ncr 5380 i/o registers
0031   F200             sr_csd	.equ	scsi		;current SCSI data
0032   F200             sr_icr	.equ	scsi+$01	;initiator command
0033   F200             sr_mr	.equ	scsi+$02	;mode
0034   F200             sr_tcr	.equ	scsi+$03	;target command
0035   F200             sr_csbs	.equ	scsi+$04	;current SCSI bus stat.
0036   F200             sr_bsr	.equ	scsi+$05	;bus status
0037   F200             sr_idr	.equ	scsi+$06	;initiator DMA recv.
0038   F200             sr_rpi	.equ	scsi+$07	;reset parity/irq
0039   F200             ;
0040   F200             ;ncr 5380 output only registers
0041   F200             sr_odr	.equ	scsi		;output data
0042   F200             sr_ser	.equ	scsi+$04	;select enable
0043   F200             sr_sds	.equ	scsi+$05	;start DMA send
0044   F200             sr_sdtr	.equ	scsi+$06	;start target DMA recv.
0045   F200             sr_sdir	.equ	scsi+$07	;start initiator DMA recv.
0046   F200             ;
0047   F200             ;SCSI current bus status bit masks
0048   F200             sm_rst	.equ	$80		;reset
0049   F200             sm_bsy	.equ	$40		;busy
0050   F200             sm_req	.equ	$20		;request
0051   F200             sm_msg	.equ	$10		;message
0052   F200             sm_cd	.equ	$08		;cmd/data
0053   F200             sm_io	.equ	$04		;in/out
0054   F200             sm_sel	.equ	$02		;select
0055   F200             sm_dbp	.equ	$01		;parity bit
0056   F200             ;
0057   F200             sm_phm	.equ	$08		;phase match bit
0058   F200             ;
TASM Z80 Assembler.               cbios.z80                        page 1
CP/M Version 2.2 bios

0059   F200             	.eject
0060   F200             ;------------------------------------------------------------------------------
0061   F200             ;	jump vector for individual subroutines
0062   F200             ;
0063   F200 C3 C0 F2    	jp	boot	;cold start
0064   F203 C3 F0 F2    wboote:	jp	wboot	;warm start
0065   F206 C3 19 F3    	jp	const	;console status
0066   F209 C3 26 F3    	jp	conin	;console character in
0067   F20C C3 32 F3    	jp	conout	;console character out
0068   F20F C3 32 F3    	jp	list	;list character out
0069   F212 C3 32 F3    	jp	punch	;punch character out
0070   F215 C3 3F F3    	jp	reader	;reader character out
0071   F218 C3 44 F3    	jp	home	;move head to home position
0072   F21B C3 45 F3    	jp	seldsk	;select disk
0073   F21E C3 7A F3    	jp	settrk	;set track number
0074   F221 C3 7F F3    	jp	setsec	;set sector number
0075   F224 C3 9A F3    	jp	setdma	;set dma address
0076   F227 C3 9F F3    	jp	rd_rec	;read disk record
0077   F22A C3 B1 F3    	jp	wr_rec	;write disk record
0078   F22D C3 3D F3    	jp	listst	;return list status
0079   F230 C3 84 F3    	jp	sectran	;sector translate
0080   F233 C3 A9 F4    	jp	scsi_go	;direct scsi i/o
TASM Z80 Assembler.               cbios.z80                        page 2
CP/M Version 2.2 bios

0081   F236             	.eject
0082   F236             ;----------------------------------------------------------------
0083   F236             ;	fixed data tables for four drives
0084   F236             ;	a:,b: floppy 720k
0085   F236             ;	c:    hard disk
0086   F236             ;	d:    hard disk
0087   F236             ;
0088   F236             dpbase:
0089   F236             ;	disk parameter header for disk 00
0090   F236 76 F2 00 00 	.dw	trans, 0000h
0091   F23A 00 00 00 00 	.dw	0000h, 0000h
0092   F23E 6E F8 A9 F2 	.dw	dirbf, dpblk1
0093   F242 6E F7 EE F5 	.dw	chk00, all00
0094   F246             ;
0095   F246             ;	disk parameter header for disk 01
0096   F246 76 F2 00 00 	.dw	trans, 0000h
0097   F24A 00 00 00 00 	.dw	0000h, 0000h
0098   F24E 6E F8 A9 F2 	.dw	dirbf, dpblk1
0099   F252 AE F7 2E F6 	.dw	chk01, all01
0100   F256             ;
0101   F256             ;	disk parameter header for disk 02
0102   F256 00 00 00 00 	.dw	0000h, 0000h
0103   F25A 00 00 00 00 	.dw	0000h, 0000h
0104   F25E 6E F8 9A F2 	.dw	dirbf, dpblk0
0105   F262 EE F7 6E F6 	.dw	chk02, all02
0106   F266             ;
0107   F266             ;	disk parameter header for disk 03
0108   F266 00 00 00 00 	.dw	0000h, 0000h
0109   F26A 00 00 00 00 	.dw	0000h, 0000h
0110   F26E 6E F8 9A F2 	.dw	dirbf, dpblk0
0111   F272 2E F8 EE F6 	.dw	chk03, all03
0112   F276             
0113   F276             ;----------------------------------------------------------------
0114   F276             ;	sector translate table (floppy)
0115   F276 01 02 03 04 trans:	.db	 1,  2,  3,  4	;sectors  1,  2,  3,  4
0116   F27A 0D 0E 0F 10 	.db	13, 14, 15, 16	;sectors  5,  6,  7,  8
0117   F27E 19 1A 1B 1C 	.db	25, 26, 27, 28	;sectors  9, 10, 11, 12
0118   F282 05 06 07 08 	.db	 5,  6,  7,  8	;sectors 13, 14, 15, 16
0119   F286 11 12 13 14 	.db	17, 18, 19, 20	;sectors 17, 18, 19, 20
0120   F28A 1D 1E 1F 20 	.db	29, 30, 31, 32	;sectors 21, 22, 23, 24
0121   F28E 09 0A 0B 0C 	.db	 9, 10, 11, 12	;sectors 25, 26. 27, 28
0122   F292 15 16 17 18 	.db	21, 22, 23, 24	;sectors 29, 30, 31, 32
0123   F296 21 22 23 24 	.db	33, 34, 35, 36	;sectors 33, 34, 35, 36
TASM Z80 Assembler.               cbios.z80                        page 3
CP/M Version 2.2 bios

0124   F29A             	.eject
0125   F29A             ;----------------------------------------------------------------
0126   F29A             ;disk parameter block for hard disks.(8m)
0127   F29A             ;block size=8k (BLS), 512 dir entries (DRM), 4 blocks for directory
0128   F29A             ;15872 bytes reserved for system (31 disk blocks)
0129   F29A             ;LBN 0 is reserved for boot loader
0130   F29A             dpblk0:
0131   F29A 80 00       	.dw	128		;SPT records per track
0132   F29C 06          	.db	6		;BSH block shift factor
0133   F29D 3F          	.db	63		;BLM block mask
0134   F29E 03          	.db	3		;EXM null mask
0135   F29F FF 03       	.dw	1023		;DSM disk size-1
0136   F2A1 FF 01       	.dw	511		;DRM directory max-1
0137   F2A3 F0          	.db	0f0h		;AL0 alloc 0
0138   F2A4 00          	.db	0		;AL1 alloc 1
0139   F2A5 00 00       	.dw	0		;CKS check size
0140   F2A7 01 00       	.dw	1		;OFF track offset
0141   F2A9             ;
0142   F2A9             ;----------------------------------------------------------------
0143   F2A9             ;disk parameter block for floppy disks. (720k)
0144   F2A9             ;block size=2k (BLS), 256 dir entries (DRM), 4 blocks for directory
0145   F2A9             ;8704 bytes reserved for system (17 disk blocks)
0146   F2A9             ;sector 1 is reserved for boot loader
0147   F2A9             dpblk1:
0148   F2A9 24 00       	.dw	36		;SPT records per track
0149   F2AB 04          	.db	4		;BSH block shift factor
0150   F2AC 0F          	.db	15		;BLM block mask
0151   F2AD 00          	.db	0		;EXM null mask
0152   F2AE 5E 01       	.dw	350		;DSM disk size-1
0153   F2B0 FF 00       	.dw	255		;DRM directory max
0154   F2B2 F0          	.db	0f0h		;AL0 alloc 0
0155   F2B3 00          	.db	0		;AL1 alloc 1
0156   F2B4 40 00       	.dw	64		;CKS check size
0157   F2B6 04 00       	.dw	4		;OFF track offset
0158   F2B8             
0159   F2B8             ;----------------------------------------------------------------
0160   F2B8             ;target/lun table
0161   F2B8             ;This table maps CP/M drive letters to target ID and LUN
0162   F2B8             ; 2 bytes per drive
0163   F2B8             ; 1st byte target id bit
0164   F2B8             ; 2nd byte lun (bits 7,6,5) ored with type (0=hd 1=fd))
0165   F2B8             ;
0166   F2B8             tidlun:
0167   F2B8             ;drive a:
0168   F2B8 01          	.db	1	;tid=0
0169   F2B9 01          	.db	1	;lun=0 type=1 (floppy)
0170   F2BA             ;drive b:
0171   F2BA 01          	.db	1	;tid=0
0172   F2BB 21          	.db	$21	;lun=1 type=1 (floppy)
0173   F2BC             ;drive c:
0174   F2BC 02          	.db	2	;tid=1
0175   F2BD 00          	.db	0	;lun=0 type=0 (hard)
0176   F2BE             ;drive d:
0177   F2BE 04          	.db	4	;tid=2
0178   F2BF 00          	.db	0	;lun=0 type=0 (hard)
TASM Z80 Assembler.               cbios.z80                        page 4
CP/M Version 2.2 bios

0179   F2C0             	.eject
0180   F2C0             ;----------------------------------------------------------------
0181   F2C0             ; Cold boot
0182   F2C0             ; perform parameter initialization
0183   F2C0             ;
0184   F2C0             boot:
0185   F2C0 AF          	xor	a		;zero in the accum
0186   F2C1 32 03 00    	ld	(iobyte),a	;clear the iobyte
0187   F2C4 32 CC F5    	ld	(cur_tid),a	;mark buffer invalid
0188   F2C7 32 E5 F5    	ld	(fl_dirty),a	;and not written
0189   F2CA 3E 02       	ld	a,sysdsk	;select system disk
0190   F2CC 32 04 00    	ld	(curdsk),a	;set disk
0191   F2CF             ;
0192   F2CF             gocpm:
0193   F2CF 3E C3       	ld 	a, 0c3h		;c3 is a jmp instruction
0194   F2D1 32 00 00    	ld	(0),a		;for jmp to wboot
0195   F2D4 21 03 F2    	ld	hl, wboote	;wboot entry point
0196   F2D7 22 01 00    	ld	(1),hl		;set address field for jmp at 0
0197   F2DA             ;
0198   F2DA 32 05 00    	ld	(5),a		;for jmp to bdos
0199   F2DD 21 06 E4    	ld	hl, bdos	;bdos entry point
0200   F2E0 22 06 00    	ld	(6),hl		;address field of jump at 5 to bdos
0201   F2E3             ;
0202   F2E3 01 80 00    	ld	bc, 80h		;default dma address is 80h
0203   F2E6 CD 9A F3    	call	setdma
0204   F2E9             ;
0205   F2E9 3A 04 00    	ld	a,(curdsk)	;get current disk number
0206   F2EC 4F          	ld 	c, a		;send to the ccp
0207   F2ED C3 00 DC    	jp	ccp		;go to cp/m for further processing
0208   F2F0             
0209   F2F0             ;----------------------------------------------------------------
0210   F2F0             ; Warm boot
0211   F2F0             ; load ccp and bdos into memory
0212   F2F0             ;
0213   F2F0             wboot:
0214   F2F0 31 80 00    	ld	sp, 80h		;use space below buffer for stack
0215   F2F3 0E 02       	ld 	c, sysdsk	;select system disk
0216   F2F5 CD 45 F3    	call	seldsk		;
0217   F2F8 AF          	xor a
0218   F2F9 32 CC F5    	ld (cur_tid),a		;mark buffer invalid
0219   F2FC 32 E5 F5    	ld (fl_dirty),a		;and not written
0220   F2FF             ;
0221   F2FF             ;setup wboot read
0222   F2FF 3A E2 F5    	ld a,(req_lun)		;get boot lun
0223   F302 32 B3 F5    	ld (s_wboot+1),a	;set it
0224   F305 3A E1 F5    	ld a,(req_tid)		;get target id
0225   F308 DD 21 B8 F5 	ld ix,s_iobt		;point to boot io table
0226   F30C DD 77 00    	ld (ix),a		;set target id
0227   F30F             ;
0228   F30F             ;pointers all setup so do it.	
0229   F30F CD A9 F4    	call scsi_go		;do scsi io
0230   F312 E6 02       	and 02h			;mask to error bit
0231   F314 CA CF F2    	jp z,gocpm		;read good so finish boot
0232   F317 18 D7       	jr wboot		;try again
TASM Z80 Assembler.               cbios.z80                        page 5
CP/M Version 2.2 bios

0233   F319             	.eject
0234   F319             ;----------------------------------------------------------------
0235   F319             ;	simple i/o handlers for ns16550
0236   F319             ;
0237   F319             ;----------------------------------------------------------------
0238   F319             ;console status, return 0ffh if character ready, 00h if not
0239   F319             ;
0240   F319             const:
0241   F319 DB 85       	in 	a,(uart+5)	;get status
0242   F31B E6 01       	and 	01h		;check rxrdy bit
0243   F31D CA 23 F3    	jp 	z,no_char
0244   F320 3E FF       	ld	a,0ffh		;char ready	
0245   F322 C9          	ret
0246   F323             no_char:
0247   F323 3E 00       	ld	a,00h		;no char
0248   F325 C9          	ret
0249   F326             
0250   F326             ;----------------------------------------------------------------
0251   F326             ;console character into register a
0252   F326             ;----------------------------------------------------------------
0253   F326             ;
0254   F326             conin:
0255   F326 DB 85       	in 	a,(uart+5)	;get status
0256   F328 E6 01       	and 	01h		;check rxrdy bit
0257   F32A CA 26 F3    	jp 	z,conin		;loop until char ready
0258   F32D DB 80       	in 	a,(uart)	;get char
0259   F32F E6 7F       	and	7fh		;strip parity bit
0260   F331 C9          	ret
0261   F332             
0262   F332             ;----------------------------------------------------------------
0263   F332             ;send character to punch device
0264   F332             ;(stub)
0265   F332             ;----------------------------------------------------------------
0266   F332             ;
0267   F332             punch:
0268   F332             ;----------------------------------------------------------------
0269   F332             ;list character from register c
0270   F332             ;(stub)
0271   F332             ;----------------------------------------------------------------
0272   F332             ;
0273   F332             list:
0274   F332             ;----------------------------------------------------------------
0275   F332             ;console character output from register c
0276   F332             ;----------------------------------------------------------------
0277   F332             ;
0278   F332             conout:
0279   F332 DB 85       	in	a,(uart+5)
0280   F334 E6 20       	and	20h		;check txrdy bit
0281   F336 CA 32 F3    	jp	z,conout	;loop until port ready
0282   F339 79          	ld	a,c		;get the char
0283   F33A D3 80       	out	(uart),a	;out to port
0284   F33C C9          	ret
0285   F33D             
0286   F33D             ;----------------------------------------------------------------
0287   F33D             ;return list status (0 if not ready, 1 if ready)
0288   F33D             ;(stub)
0289   F33D             ;----------------------------------------------------------------
0290   F33D             ;
0291   F33D             listst:
TASM Z80 Assembler.               cbios.z80                        page 6
CP/M Version 2.2 bios

0292   F33D AF          	xor	a	 	;0 is always ok to return
0293   F33E C9          	ret
0294   F33F             
0295   F33F             ;----------------------------------------------------------------
0296   F33F             ;reader character into register a from reader device
0297   F33F             ;(stub)
0298   F33F             ;----------------------------------------------------------------
0299   F33F             ;
0300   F33F             reader:
0301   F33F 3E 1A       	ld     a, 1ah		;return end of file (stub routine)
0302   F341 E6 7F       	and    7fh		;strip parity bit
0303   F343 C9          	ret
TASM Z80 Assembler.               cbios.z80                        page 7
CP/M Version 2.2 bios

0304   F344             	.eject
0305   F344             ;----------------------------------------------------------------
0306   F344             ;	i/o drivers for the disk 
0307   F344             ; Drivers include sector blocking/deblocking
0308   F344             ; CP/M records (128B) are grouped 4 to a disk block (512B)
0309   F344             ; the low 2 bits of the CP/M sector number select the data
0310   F344             ; position in the disk buffer
0311   F344             ;----------------------------------------------------------------
0312   F344             ;
0313   F344             ;----------------------------------------------------------------
0314   F344             ; move to track 00
0315   F344             ;----------------------------------------------------------------
0316   F344             ;
0317   F344             home:
0318   F344 C9          	ret			;not used
0319   F345             
0320   F345             ;----------------------------------------------------------------
0321   F345             ; select disk given by register c
0322   F345             ; set requested TID,LUN and dsk_typ
0323   F345             ; return parameter header in HL
0324   F345             ;----------------------------------------------------------------
0325   F345             ;
0326   F345             seldsk:
0327   F345 21 00 00    	ld	hl, 0000h	;error return code
0328   F348 11 B8 F2    	ld	de,tidlun	;point to tid table
0329   F34B 79          	ld 	a, c
0330   F34C 32 E0 F5    	ld	(diskno),a	;set disk number
0331   F34F FE 04       	cp	disks		;must be between 0 and 3
0332   F351 D0          	ret	nc		;return if bad drive num
0333   F352             ;
0334   F352             ; disk number is in the proper range
0335   F352             ; setup target id and lun
0336   F352 3A E0 F5    	ld	a,(diskno)	;get disk number
0337   F355 6F          	ld 	l, a		;into hl
0338   F356 26 00       	ld 	h, 0		;high order zero
0339   F358 29          	add	hl,hl		;*2
0340   F359 19          	add	hl,de		;make table index
0341   F35A 7E          	ld	a,(hl)		;get target id
0342   F35B 32 E1 F5    	ld	(req_tid),a	;set requested target id
0343   F35E 23          	inc 	hl
0344   F35F 7E          	ld	a,(hl)		;get target lun
0345   F360 E6 E0       	and	$e0		;mask to lun bits
0346   F362 32 E2 F5    	ld	(req_lun),a	;set lun
0347   F365 7E          	ld	a,(hl)		;get drive type
0348   F366 E6 01       	and	1		;mask to type bit
0349   F368 32 E8 F5    	ld	(dsk_typ),a	;set disk type	
0350   F36B             ;
0351   F36B             ; compute proper disk parameter entry address
0352   F36B             ; mult disk num by size of table entry (16Bytes)
0353   F36B             ; add to base of table
0354   F36B 3A E0 F5    	ld	a,(diskno)
0355   F36E 6F          	ld 	l, a		;l=disk number 0, 1, 2, 3
0356   F36F 26 00       	ld 	h, 0		;high order zero
0357   F371 29          	add	hl,hl		;*2
0358   F372 29          	add	hl,hl		;*4
0359   F373 29          	add	hl,hl		;*8
0360   F374 29          	add	hl,hl		;*16 (size of each table)
0361   F375 11 36 F2    	ld	de, dpbase
0362   F378 19          	add	hl,de		;hl=dpbase+(diskno*16)
TASM Z80 Assembler.               cbios.z80                        page 8
CP/M Version 2.2 bios

0363   F379 C9          	ret
0364   F37A             
0365   F37A             ;----------------------------------------------------------------
0366   F37A             ;set track given by register bc
0367   F37A             ;----------------------------------------------------------------
0368   F37A             ;
0369   F37A             settrk:
0370   F37A ED 43 DA F5 	ld	(track),bc
0371   F37E C9          	ret
0372   F37F             
0373   F37F             ;----------------------------------------------------------------
0374   F37F             ;set sector given by register bc
0375   F37F             ;----------------------------------------------------------------
0376   F37F             ;
0377   F37F             setsec:
0378   F37F ED 43 DC F5 	ld	(sector),bc
0379   F383 C9          	ret
TASM Z80 Assembler.               cbios.z80                        page 9
CP/M Version 2.2 bios

0380   F384             	.eject
0381   F384             ;----------------------------------------------------------------
0382   F384             ; sector translate
0383   F384             ;
0384   F384             ;set record based on low 2 bits of sector number
0385   F384             ;bits 0-1 of sector are where this record is in disk buffer
0386   F384             ;
0387   F384             ;translate the sector given by bc using the
0388   F384             ;translate table given by de
0389   F384             ;
0390   F384             ;no translation is done for hard disk
0391   F384             ;translated sector number in hl
0392   F384             ;----------------------------------------------------------------
0393   F384             ;
0394   F384             sectran:
0395   F384 79          	ld	a,c		;save record bits
0396   F385 E6 03       	and	3		;mask to record bits
0397   F387 32 E6 F5    	ld	(record),a	;save it
0398   F38A 3A E8 F5    	ld	a,(dsk_typ)	;get disk type
0399   F38D E6 01       	and	1		;mask to type bit
0400   F38F 28 06       	jr	z,hsectrn	;jmp if hard disk
0401   F391             ;
0402   F391             ;floppy sectran routine (use trans table)
0403   F391 EB          	ex	de,hl		;table ptr into hl
0404   F392 09          	add	hl,bc		;add sector num
0405   F393 6E          	ld 	l, (hl)		;get translated into hl
0406   F394 26 00       	ld 	h, 0		;h is always 0
0407   F396 C9          	ret			;with value in hl
0408   F397             ;
0409   F397             ;hard disk sectran routine (no translation)
0410   F397             hsectrn:
0411   F397 C5          	push bc
0412   F398 E1          	pop hl			;get sector
0413   F399 C9          	ret
0414   F39A             
0415   F39A             ;----------------------------------------------------------------
0416   F39A             ;set dma address given by register bc
0417   F39A             ;----------------------------------------------------------------
0418   F39A             ;
0419   F39A             setdma:
0420   F39A ED 43 DE F5 	ld	(dmaad),bc	;save the address
0421   F39E C9          	ret
TASM Z80 Assembler.               cbios.z80                        page 10
CP/M Version 2.2 bios

0422   F39F             	.eject
0423   F39F             ;----------------------------------------------------------------
0424   F39F             ;read one cp/m record (128 bytes) from disk buffer.
0425   F39F             ;calls flush to write current disk block (if dirty) and
0426   F39F             ; read requested disk block into buffer
0427   F39F             ;copy record to user space
0428   F39F             ;return 0h in register A if the operation completes properly
0429   F39F             ;and 1h if an error occurs during the read.
0430   F39F             ;----------------------------------------------------------------
0431   F39F             ;
0432   F39F             rd_rec:
0433   F39F CD DC F3    	call flush	;write (if necessary) and read new block
0434   F3A2 C0          	ret nz		;error?
0435   F3A3 CD 9A F4    	call mk_ptr	;point to disk data area in hl
0436   F3A6 ED 5B DE F5 	ld de,(dmaad)	;destination pointer
0437   F3AA 01 80 00    	ld bc,128	;byte count
0438   F3AD ED B0       	ldir		;block move data to user
0439   F3AF AF          	xor a		;update condition code
0440   F3B0 C9          	ret
0441   F3B1             
0442   F3B1             ;----------------------------------------------------------------
0443   F3B1             ;write one cp/m record (128 bytes) to disk buffer.
0444   F3B1             ;calls flush to write current disk block (if dirty)
0445   F3B1             ;and pre read requested disk block into buffer
0446   F3B1             ;moves record to buffer and set dirty flag
0447   F3B1             ;then write to disk if wr_type=1 (directory record)
0448   F3B1             ;return  0h in register a if the operation completes properly
0449   F3B1             ;and 1h if an error occurs during the fush,preread or write
0450   F3B1             ;----------------------------------------------------------------
0451   F3B1             ;
0452   F3B1             wr_rec:
0453   F3B1 79          	ld a,c		;
0454   F3B2 32 E9 F5    	ld (wr_type),a	;save write type
0455   F3B5             ;
0456   F3B5             ;write buffer if needed
0457   F3B5 CD DC F3    	call flush	;write buffer and pre-read if necessary
0458   F3B8 C0          	ret nz		;exit if error
0459   F3B9             ;
0460   F3B9             ;move record to buffer
0461   F3B9 CD 9A F4    	call mk_ptr	;point to record in disk buffer
0462   F3BC EB          	ex de,hl	;dest pointer to de
0463   F3BD 2A DE F5    	ld hl,(dmaad)	;source pointer
0464   F3C0 01 80 00    	ld bc,128	;count
0465   F3C3 ED B0       	ldir		;move user data to buffer
0466   F3C5 3E FF       	ld a,$ff	;set dirty flag
0467   F3C7 32 E5 F5    	ld (fl_dirty),a
0468   F3CA             ;
0469   F3CA             ;write buffer now if wr_type=1
0470   F3CA 3A E9 F5    	ld a,(wr_type)	;get write type
0471   F3CD E6 01       	and 1
0472   F3CF 28 0A       	jr z,not_imm	;dont write now?
0473   F3D1 CD 38 F4    	call wr_phy
0474   F3D4 3E 01       	ld a,1		;preset error return code
0475   F3D6 C0          	ret nz		;exit if error
0476   F3D7 AF          	xor a		;no error return code
0477   F3D8 32 E5 F5    	ld (fl_dirty),a	;clear dirty flag
0478   F3DB             not_imm:
0479   F3DB C9          	ret
TASM Z80 Assembler.               cbios.z80                        page 11
CP/M Version 2.2 bios

0480   F3DC             	.eject
0481   F3DC             ;----------------------------------------------------------------
0482   F3DC             ;Update sector buffer
0483   F3DC             ;if buffer = requested do nothing
0484   F3DC             ;else if dirty write to disk
0485   F3DC             ;read requested block into buffer
0486   F3DC             ;----------------------------------------------------------------
0487   F3DC             ;
0488   F3DC             flush:
0489   F3DC CD 4B F4    	call ts2lbn		;convert track/sector to lbn
0490   F3DF             ;
0491   F3DF             ;see if requested is already in disk buffer
0492   F3DF             ;nothing to do if it matches
0493   F3DF 21 E1 F5    	ld hl,req_tid
0494   F3E2 3A CC F5    	ld a,(cur_tid)		;check target id
0495   F3E5 BE          	cp (hl)
0496   F3E6 20 17       	jr nz,notcur		;not currently in buffer
0497   F3E8             ;
0498   F3E8 23          	inc hl
0499   F3E9 3A C7 F5    	ld a,(cur_lun)		;check lun
0500   F3EC BE          	cp (hl)
0501   F3ED 20 10       	jr nz,notcur		;not currently in buffer
0502   F3EF             ;
0503   F3EF 23          	inc hl
0504   F3F0 3A C8 F5    	ld a,(cur_lbn)		;check block number (hi)
0505   F3F3 BE          	cp (hl)
0506   F3F4 20 09       	jr nz,notcur		;not currently in buffer
0507   F3F6             ;
0508   F3F6 23          	inc hl
0509   F3F7 3A C9 F5    	ld a,(cur_lbn+1)	;check block number (low)
0510   F3FA BE          	cp (hl)
0511   F3FB 20 02       	jr nz,notcur		;not currently in buffer
0512   F3FD             ;
0513   F3FD             ;everything matched so record is currently in buffer
0514   F3FD             ;no write or preread required
0515   F3FD AF          	xor a			;success
0516   F3FE C9          	ret			;exit
0517   F3FF             ;
0518   F3FF             ;requested record is not in buffer
0519   F3FF             notcur:
0520   F3FF             ;
0521   F3FF             ;is the current buffer valid?
0522   F3FF 3A CC F5    	ld a,(cur_tid)		;get TID
0523   F402 B7          	or a			;zero is not valid
0524   F403 28 0C       	jr z,setreq		;read if nothing in buf
0525   F405             ;
0526   F405             ;has the buffer been written? (dirty)
0527   F405 3A E5 F5    	ld a,(fl_dirty)		;buffer written?
0528   F408 B7          	or a			;if buffer not written
0529   F409 28 06       	jr z,setreq		;read if not dirty
0530   F40B             ;
0531   F40B             ;write the changed buffer to disk
0532   F40B CD 38 F4    	call wr_phy		;write block to disk
0533   F40E 3E 01       	ld a,01			;preset error code
0534   F410 C0          	ret nz			;error? then exit
0535   F411             ;
0536   F411             ;setup parameters for requested sector
0537   F411             setreq:
0538   F411 3A E1 F5    	ld a,(req_tid)		;change to requested
TASM Z80 Assembler.               cbios.z80                        page 12
CP/M Version 2.2 bios

0539   F414 32 CC F5    	ld (cur_tid),a		;target
0540   F417 3A E2 F5    	ld a,(req_lun)
0541   F41A 32 C7 F5    	ld (cur_lun),a		;LUN LBN hi
0542   F41D 3A E3 F5    	ld a,(req_lbn)
0543   F420 32 C8 F5    	ld (cur_lbn),a		;LBN mid
0544   F423 3A E4 F5    	ld a,(req_lbn+1)
0545   F426 32 C9 F5    	ld (cur_lbn+1),a	;LBN low
0546   F429             ;
0547   F429             ;pre-read requested sector
0548   F429 CD 3C F4    	call rd_phy		;read block from disk
0549   F42C 3E 00       	ld a,0			;preset return value
0550   F42E 32 E5 F5    	ld (fl_dirty),a		;clear buffer written
0551   F431 C8          	ret z			;Z=success
0552   F432             ;
0553   F432             ;read failed so invalidate buffer
0554   F432 32 CC F5    	ld (cur_tid),a		;invalidate buffer
0555   F435 3E 01       	ld a,1			;error response
0556   F437 C9          	ret			;NZ=error
TASM Z80 Assembler.               cbios.z80                        page 13
CP/M Version 2.2 bios

0557   F438             	.eject
0558   F438             ;----------------------------------------------------------------
0559   F438             ;write logical block to disk
0560   F438             ;cur_tid,cur_lun,cur_lbn already set
0561   F438             ;exit with zero status if ok
0562   F438             ;----------------------------------------------------------------
0563   F438             ;
0564   F438             wr_phy:
0565   F438 3E 0A       	ld a,0ah		;write command
0566   F43A 18 02       	jr phy_com		;finish same as read
0567   F43C             
0568   F43C             ;----------------------------------------------------------------
0569   F43C             ;read logical block from disk
0570   F43C             ;cur_tid,cur_lun,cur_lbn already set
0571   F43C             ;exit with zero status if ok
0572   F43C             ;----------------------------------------------------------------
0573   F43C             ;
0574   F43C             rd_phy:
0575   F43C 3E 08       	ld a,8			;read command
0576   F43E             phy_com:
0577   F43E 32 C6 F5    	ld (s_cdb),a		;set in command block
0578   F441 DD 21 CC F5 	ld ix,s_iot		;point to io table
0579   F445 CD A9 F4    	call scsi_go
0580   F448 E6 02       	and 02h			;mask to error bit
0581   F44A C9          	ret
0582   F44B             
0583   F44B             ;----------------------------------------------------------------
0584   F44B             ;convert track/sector to LBN (logical block number)
0585   F44B             ;req_lun,dsk_typ,track,sector set on entry
0586   F44B             ;req_lun,req_lbn updated on exit
0587   F44B             ;----------------------------------------------------------------
0588   F44B             ;
0589   F44B             ts2lbn:
0590   F44B 3A E8 F5    	ld a,(dsk_typ)		;branch on disk type
0591   F44E E6 01       	and 1			;mask to FD bit
0592   F450 28 1B       	jr z,hconv		;goto hard disk
0593   F452             
0594   F452             ;
0595   F452             ;----------------------------------------------------------------
0596   F452             ;floppy disk LBN conversion
0597   F452             ;divide requested record by 4 (4 cp/m records per sector) 
0598   F452             ;mult track by 9 and add sector/4=lbn
0599   F452             ;
0600   F452             fconv:
0601   F452 3A DC F5    	ld a,(sector)		;get desired sector
0602   F455 3D          	dec a			;make sector zero based
0603   F456 CB 3F       	srl a			;divide by 4
0604   F458 CB 3F       	srl a
0605   F45A 4F          	ld c,a			;save result in bc
0606   F45B 06 00       	ld b,0
0607   F45D             ;
0608   F45D             ;multiply track by 9 (phy sectors per track)
0609   F45D 2A DA F5    	ld hl,(track)		;get track in hl
0610   F460 E5          	push hl
0611   F461 D1          	pop de			;get track in de
0612   F462 29          	add hl,hl		;times 2
0613   F463 29          	add hl,hl		;times 4
0614   F464 29          	add hl,hl		;times 8
0615   F465 19          	add hl,de		;plus de=times 9
TASM Z80 Assembler.               cbios.z80                        page 14
CP/M Version 2.2 bios

0616   F466 09          	add hl,bc		;plus sector=lbn
0617   F467             ;
0618   F467 06 00       	ld b,0			;B=LBA hi=0
0619   F469 4C          	ld c,h			;H into LBA mid
0620   F46A 5D          	ld e,l			;L into LBA low
0621   F46B 18 1B       	jr set_req
0622   F46D             ;
0623   F46D             ;----------------------------------------------------------------
0624   F46D             ;hard disk conversion
0625   F46D             hconv:
0626   F46D 3A DC F5    	ld a,(sector)
0627   F470 17          	rla			;line up sector to msb
0628   F471 5F          	ld e,a			;save it
0629   F472 ED 4B DA F5 	ld bc,(track)		;get requested track
0630   F476             ;
0631   F476             ;shift bc,e right 3 places (track/sector)
0632   F476             ;or in the lun bits into b
0633   F476             ;this will divide sector by 4
0634   F476             ;filling hi bits with track bits
0635   F476             ;resulting LBN= lllt tttt  tttt tttt  ttts ssss
0636   F476             ;              |    B    ||    C    ||    E    |
0637   F476 CB 38       	srl b
0638   F478 CB 19       	rr c
0639   F47A CB 1B       	rr e
0640   F47C CB 38       	srl b
0641   F47E CB 19       	rr c
0642   F480 CB 1B       	rr e
0643   F482 CB 38       	srl b
0644   F484 CB 19       	rr c
0645   F486 CB 1B       	rr e
0646   F488             ;
0647   F488             ;----------------------------------------------------------------
0648   F488             ;set req_lun,req_lbn with values in B,C,E
0649   F488             ;
0650   F488             set_req:
0651   F488             ;
0652   F488             ;or LUN bits into LBA hi
0653   F488 3A E2 F5    	ld a,(req_lun)		;get LUN bits
0654   F48B E6 E0       	and 0e0h		;mask to lun bits
0655   F48D B0          	or b			;set high addr
0656   F48E             ;
0657   F48E             ;put LUN/LBA in requested
0658   F48E 32 E2 F5    	ld (req_lun),a		;set lba hi and lun
0659   F491 79          	ld a,c			;get mid
0660   F492 32 E3 F5    	ld (req_lbn),a		;save lba mid
0661   F495 7B          	ld a,e			;get low
0662   F496 32 E4 F5    	ld (req_lbn+1),a	;save lba low
0663   F499 C9          	ret
TASM Z80 Assembler.               cbios.z80                        page 15
CP/M Version 2.2 bios

0664   F49A             	.eject
0665   F49A             ;----------------------------------------------------------------
0666   F49A             ;make pointer to cp/m record in disk buffer
0667   F49A             ;----------------------------------------------------------------
0668   F49A             ;
0669   F49A             mk_ptr:
0670   F49A 11 80 00    	ld de,128		;size of record
0671   F49D 21 6E F8    	ld hl,dskbuf-128	;point to buffer-128
0672   F4A0 3A E6 F5    	ld a,(record)		;(0-3)
0673   F4A3 3C          	inc a			;always do loop once
0674   F4A4             ptr_loop:
0675   F4A4 19          	add hl,de		;advance to next record
0676   F4A5 3D          	dec a
0677   F4A6 20 FC       	jr nz,ptr_loop		;loop till proper record
0678   F4A8 C9          	ret			;return pointer in hl
TASM Z80 Assembler.               cbios.z80                        page 16
CP/M Version 2.2 bios

0679   F4A9             	.eject
0680   F4A9             ;-------------------------------------------------------------------------------
0681   F4A9             ;do scsi transaction
0682   F4A9             ; ix=scsi io block
0683   F4A9             ;-------------------------------------------------------------------------------
0684   F4A9             scsi_go:
0685   F4A9 3E FF       	ld a,$ff	;preset error status
0686   F4AB DD 6E 04    	ld l,(ix+4)	;point to status address
0687   F4AE DD 66 05    	ld h,(ix+5)	;point to status address
0688   F4B1 77          	ld (hl),a	;set error
0689   F4B2             ;
0690   F4B2 AF          	xor a		;
0691   F4B3 D3 8A       	out (sr_mr),a	;reset control reg
0692   F4B5 D3 8B       	out (sr_tcr),a	;clear command reg.
0693   F4B7 D3 89       	out (sr_icr),a	;
0694   F4B9 DD 7E 00    	ld a,(ix)	;get tid
0695   F4BC D3 88       	out (sr_odr),a	;set target id
0696   F4BE 3E 01       	ld a,$01	;drive bus
0697   F4C0 D3 89       	out (sr_icr),a	;
0698   F4C2 3E 05       	ld a,$05	;set sel and drive bus
0699   F4C4 D3 89       	out (sr_icr),a	;
0700   F4C6             ;
0701   F4C6             ;wait for scsi busy
0702   F4C6 01 00 00    	ld bc,0		;init timeout
0703   F4C9             s_swt:
0704   F4C9 DB 8C       	in a,(sr_csbs)	;get bus status
0705   F4CB E6 40       	and sm_bsy	;mask to busy bit
0706   F4CD 20 0E       	jr nz,s_bsya	;jmp if busy active
0707   F4CF 00          	nop		;kill a little time
0708   F4D0 00          	nop
0709   F4D1 00          	nop
0710   F4D2 00          	nop
0711   F4D3 0B          	dec bc		;dec timeout
0712   F4D4 78          	ld a,b		;test timeout=0
0713   F4D5 B1          	or c
0714   F4D6 20 F1       	jr nz,s_swt	;jmp if no timeout
0715   F4D8 AF          	xor a		;clear a
0716   F4D9 D3 89       	out (sr_icr),a	;clear sel and data
0717   F4DB 18 0D       	jr s_exit	;error exit
0718   F4DD             ;
0719   F4DD             ;busy is active
0720   F4DD             s_bsya:
0721   F4DD AF          	xor a		;clear a
0722   F4DE D3 89       	out (sr_icr),a	;clear sel and data
0723   F4E0             
0724   F4E0             ;-------------------------------------------------------------------------------
0725   F4E0             ;
0726   F4E0             ;target is selected so test bsy and req
0727   F4E0             ;then decode requested phase
0728   F4E0             ;
0729   F4E0             ;-------------------------------------------------------------------------------
0730   F4E0             phase:
0731   F4E0 AF          	xor a
0732   F4E1 D3 89       	out (sr_icr),a	;reset initiator
0733   F4E3             ;
0734   F4E3             s_wtreq:
0735   F4E3 DB 8C       	in a,(sr_csbs)	;get bus status
0736   F4E5 47          	ld b,a		;save copy
0737   F4E6 E6 40       	and sm_bsy	;mask to busy bit
TASM Z80 Assembler.               cbios.z80                        page 17
CP/M Version 2.2 bios

0738   F4E8 20 08       	jr nz,s_wtrq1	;still busy so cont.
0739   F4EA             
0740   F4EA             ;-------------------------------------------------------------------------------
0741   F4EA             ;busy lost so exit
0742   F4EA             ;-------------------------------------------------------------------------------
0743   F4EA             s_exit:
0744   F4EA DD 6E 04    	ld l,(ix+4)	;get status pointer
0745   F4ED DD 66 05    	ld h,(ix+5)	;get status pointer
0746   F4F0 7E          	ld a,(hl)
0747   F4F1 C9          	ret		;busy lost? were done
0748   F4F2             ;
0749   F4F2             s_wtrq1:
0750   F4F2 78          	ld a,b		;recover status
0751   F4F3 E6 20       	and sm_req	;request active?
0752   F4F5 28 EC       	jr z,s_wtreq	;loop till request
0753   F4F7             
0754   F4F7             ;-------------------------------------------------------------------------------
0755   F4F7             ;request is active so set 5380 to requested phase
0756   F4F7             ;-------------------------------------------------------------------------------
0757   F4F7 78          	ld a,b		;recover bus status
0758   F4F8 CB 1F       	rr a		;shift status to phase bits
0759   F4FA CB 1F       	rr a
0760   F4FC E6 07       	and $07		;mask to phase bits
0761   F4FE D3 8B       	out (sr_tcr),a	;set phase
0762   F500             ;
0763   F500             ;jump to phase handler
0764   F500             ;
0765   F500 78          	ld a,b		;recover bus status 
0766   F501 CB 1F       	rr a
0767   F503 E6 0E       	and $0e		;mask to phase bits
0768   F505 5F          	ld e,a		;
0769   F506 16 00       	ld d,0
0770   F508 21 11 F5    	ld hl,phtabl	;point to table
0771   F50B 19          	add hl,de	;offset into table
0772   F50C 5E          	ld e,(hl)	;get execution address
0773   F50D 23          	inc hl
0774   F50E 56          	ld d,(hl)
0775   F50F D5          	push de
0776   F510 C9          	ret		;execute phase
0777   F511             
0778   F511             ;-------------------------------------------------------------------------------
0779   F511             ;phase table
0780   F511             ;-------------------------------------------------------------------------------
0781   F511             phtabl:
0782   F511 21 F5       	.word	phase0	;data out
0783   F513 2A F5       	.word	phase1	;data in
0784   F515 33 F5       	.word	phase2	;cmd out
0785   F517 3C F5       	.word	phase3	;status in
0786   F519 EA F4       	.word	s_exit	;unused
0787   F51B EA F4       	.word	s_exit	;unused
0788   F51D 45 F5       	.word	phase6	;message out
0789   F51F 4E F5       	.word	phase7	;message in
0790   F521             
0791   F521             ;-------------------------------------------------------------------------------
0792   F521             ;phase handlers
0793   F521             ;-------------------------------------------------------------------------------
0794   F521             ;
0795   F521             ;data out
0796   F521             phase0:
TASM Z80 Assembler.               cbios.z80                        page 18
CP/M Version 2.2 bios

0797   F521 DD 6E 06    	ld l,(ix+6)	;get pointer
0798   F524 DD 66 07    	ld h,(ix+7)
0799   F527 C3 57 F5    	jp s_writ	;write bytes
0800   F52A             ;
0801   F52A             ;data in
0802   F52A             phase1:
0803   F52A DD 6E 08    	ld l,(ix+8)	;get pointer
0804   F52D DD 66 09    	ld h,(ix+9)
0805   F530 C3 87 F5    	jp s_read	;read bytes
0806   F533             ;
0807   F533             ;cmd out
0808   F533             phase2:
0809   F533 DD 6E 02    	ld l,(ix+2)
0810   F536 DD 66 03    	ld h,(ix+3)
0811   F539 C3 57 F5    	jp s_writ
0812   F53C             ;
0813   F53C             ;status in
0814   F53C             phase3:
0815   F53C DD 6E 04    	ld l,(ix+4)
0816   F53F DD 66 05    	ld h,(ix+5)
0817   F542 C3 87 F5    	jp s_read
0818   F545             ;
0819   F545             ;msg out
0820   F545             phase6:
0821   F545 DD 6E 0A    	ld l,(ix+10)
0822   F548 DD 66 0B    	ld h,(ix+11)
0823   F54B C3 57 F5    	jp s_writ
0824   F54E             ;
0825   F54E             ;msg in
0826   F54E             phase7:
0827   F54E DD 6E 0C    	ld l,(ix+12)
0828   F551 DD 66 0D    	ld h,(ix+13)
0829   F554 C3 87 F5    	jp s_read
TASM Z80 Assembler.               cbios.z80                        page 19
CP/M Version 2.2 bios

0830   F557             	.eject
0831   F557             ;-------------------------------------------------------------------------------
0832   F557             ;scsi write routine (send bytes to target)
0833   F557             ;bus phase already set. return on phase mismatch 
0834   F557             ;-------------------------------------------------------------------------------
0835   F557             s_writ:
0836   F557 3E 01       	ld a,1		;drive scsi data bus
0837   F559 D3 89       	out (sr_icr),a
0838   F55B             ;
0839   F55B             ;wait for req while checking busy
0840   F55B             ;
0841   F55B             s_wwreq:
0842   F55B DB 8C               in a,(sr_csbs)  ;get current bus stat
0843   F55D 47                  ld b,a          ;save it
0844   F55E E6 20               and sm_req      ;request active?
0845   F560 20 09               jr nz,s_wnxt    ;
0846   F562             ;
0847   F562 78                  ld a,b          ;recover current bus stat
0848   F563 E6 40               and sm_bsy      ;still busy?
0849   F565 C2 5B F5            jp nz,s_wwreq   ;loop if still busy
0850   F568 C3 E0 F4            jp phase        ;
0851   F56B             ;
0852   F56B             ;request active so check phase
0853   F56B             ;
0854   F56B             s_wnxt:
0855   F56B DB 8D               in a,(sr_bsr)   ;get status
0856   F56D E6 08               and sm_phm      ;mask to phase match
0857   F56F CA E0 F4            jp z,phase      ;jmp if phase mismatch
0858   F572             ;
0859   F572             ;request active and phase match so send data
0860   F572             ;
0861   F572 7E          	ld a,(hl)	;get byte
0862   F573 D3 88       	out (sr_odr),a	;send data
0863   F575 3E 11       	ld a,$11	;ack + drive bus
0864   F577 D3 89       	out (sr_icr),a	;set ack,drive scsi bus
0865   F579 23          	inc hl		;advance buf pointer
0866   F57A             ;
0867   F57A             ;wait for request to drop
0868   F57A             ;
0869   F57A             s_wnreq:
0870   F57A DB 8C       	in a,(sr_csbs)	;get current status
0871   F57C E6 20       	and sm_req
0872   F57E 20 FA       	jr nz,s_wnreq	;loop till req drops
0873   F580             ;
0874   F580 3E 01       	ld a,$1		;drop ack,assert data
0875   F582 D3 89       	out (sr_icr),a	;drop ack
0876   F584 C3 5B F5    	jp s_wwreq	;loop for next byte/phase
TASM Z80 Assembler.               cbios.z80                        page 20
CP/M Version 2.2 bios

0877   F587             	.eject
0878   F587             ;-------------------------------------------------------------------------------
0879   F587             ;scsi read routine (get bytes from target)
0880   F587             ;bus phase already set. return on phase mismatch 
0881   F587             ;-------------------------------------------------------------------------------
0882   F587             ;
0883   F587             s_read:
0884   F587             ;
0885   F587             ;wait for req while checking busy
0886   F587             ;
0887   F587             s_rwreq:
0888   F587 DB 8C               in a,(sr_csbs)  ;get current bus stat
0889   F589 47                  ld b,a          ;save it
0890   F58A E6 20               and sm_req      ;request active?
0891   F58C 20 09               jr nz,s_rnxt    ;
0892   F58E             ;
0893   F58E 78                  ld a,b          ;recover current bus stat
0894   F58F E6 40               and sm_bsy      ;still busy?
0895   F591 C2 87 F5            jp nz,s_rwreq   ;loop if stil busy
0896   F594 C3 E0 F4            jp phase        ;
0897   F597             ;
0898   F597             ;request active so check phase
0899   F597             s_rnxt:
0900   F597 DB 8D               in a,(sr_bsr)   ;get status
0901   F599 E6 08               and sm_phm      ;mask to phase match
0902   F59B CA E0 F4            jp z,phase      ;jmp if phase mismatch
0903   F59E             
0904   F59E             ;request active and phase match so get data
0905   F59E             ;
0906   F59E DB 88       	in a, (sr_csd)	;get data
0907   F5A0 77          	ld (hl),a	;save data
0908   F5A1 3E 10       	ld a,$10
0909   F5A3 D3 89       	out (sr_icr),a	;set ack
0910   F5A5 23          	inc hl		;advance buf pointer
0911   F5A6             ;
0912   F5A6             ;wait for request to drop
0913   F5A6             ;
0914   F5A6             s_rnreq:
0915   F5A6 DB 8C       	in a,(sr_csbs)	;get current status
0916   F5A8 E6 20       	and sm_req
0917   F5AA 20 FA       	jr nz,s_rnreq	;loop till req drops
0918   F5AC AF          	xor a
0919   F5AD D3 89       	out (sr_icr),a	;drop ack
0920   F5AF C3 87 F5    	jp s_read	;loop for next byte/phase
0921   F5B2             
TASM Z80 Assembler.               cbios.z80                        page 21
CP/M Version 2.2 bios

0922   F5B2             	.eject
0923   F5B2             ;----------------------------------------------------------------
0924   F5B2             ; initialized data area
0925   F5B2             ;----------------------------------------------------------------
0926   F5B2             ;scsi command descriptor for wboot
0927   F5B2             ;read "nsects" (512 byte) blocks starting at lbn 1
0928   F5B2             ;and put at "ccp"
0929   F5B2             ;
0930   F5B2             s_wboot:
0931   F5B2 08          		.db	8	;command (read)
0932   F5B3 00          		.db	0	;lun/lbn hi
0933   F5B4 00          		.db	0	;lbn mid
0934   F5B5 01          		.db	1	;lbn low
0935   F5B6 0B          		.db	nsects	;count
0936   F5B7 00          		.db	0	;flags
0937   F5B8             ;
0938   F5B8             ;----------------------------------------------------------------
0939   F5B8             ;scsi i/o address table for wboot
0940   F5B8             s_iobt:
0941   F5B8 00          		.db	0	;target ID (filled in by wboot)
0942   F5B9 00          		.db	0	;unused
0943   F5BA B2 F5       		.dw	s_wboot	;cdb pointer
0944   F5BC EA F5       		.dw	s_stat	;status pointer
0945   F5BE 00 DC       		.dw	ccp	;data out pointer
0946   F5C0 00 DC       		.dw	ccp	;data in pointer
0947   F5C2 EC F5       		.dw	s_msg	;msg out pointer
0948   F5C4 EC F5       		.dw	s_msg	;msg in pointer
0949   F5C6             
0950   F5C6             ;----------------------------------------------------------------
0951   F5C6             ;scsi command descriptor for read/write
0952   F5C6             ;do not use this for direct scsi i/o
0953   F5C6             ;you will mess up block/deblock
0954   F5C6             s_cdb:	
0955   F5C6 08          		.db	8	;command
0956   F5C7             cur_lun:
0957   F5C7 00          		.db	0	;lun/lba hi
0958   F5C8             cur_lbn:
0959   F5C8 00          		.db	0	;lba mid
0960   F5C9 00          		.db	0	;lba low
0961   F5CA 01          		.db	1	;count
0962   F5CB 00          		.db	0	;flags
0963   F5CC             ;
0964   F5CC             ;----------------------------------------------------------------
0965   F5CC             ;scsi i/o address table	for read/write
0966   F5CC             ;dont mess with this either
0967   F5CC             s_iot:
0968   F5CC             cur_tid:
0969   F5CC 00          		.db	0	;target
0970   F5CD 00          		.db	0	;unused
0971   F5CE C6 F5       		.dw	s_cdb	;cdb pointer
0972   F5D0 EA F5       		.dw	s_stat	;status pointer
0973   F5D2 EE F8       		.dw	dskbuf	;data out pointer
0974   F5D4 EE F8       		.dw	dskbuf	;data in pointer
0975   F5D6 EC F5       		.dw	s_msg	;msg out pointer
0976   F5D8 EC F5       		.dw	s_msg	;msg in pointer
0977   F5DA             ;
TASM Z80 Assembler.               cbios.z80                        page 22
CP/M Version 2.2 bios

0978   F5DA             	.eject
0979   F5DA             ;----------------------------------------------------------------
0980   F5DA             ;this is the end of initialized data
0981   F5DA             ;everything following must have memory space available
0982   F5DA             ;but is not part of the boot image
0983   F5DA             ;----------------------------------------------------------------
0984   F5DA             ;
0985   F5DA             ; uninitialized	data area
0986   F5DA             ;
0987   F5DA             track:		.ds	2	;track number
0988   F5DC             sector:		.ds	2	;sector number
0989   F5DE             dmaad:		.ds	2	;direct memory (buffer) address
0990   F5E0             diskno:		.ds	1	;disk number 0-15
0991   F5E1             ;
0992   F5E1             req_tid:	.ds	1	;requested target id
0993   F5E2             req_lun:	.ds	1	;requested lun
0994   F5E3             req_lbn:	.ds	2	;requested logical block
0995   F5E5             ;
0996   F5E5             fl_dirty:	.ds	1	;buffer contains unwritten data
0997   F5E6             record:		.ds	2	;requested record in disk buffer
0998   F5E8             dsk_typ:	.ds	1	;selected disk type (f/h)
0999   F5E9             wr_type:	.ds	1	;write type (imm/deffered)
1000   F5EA             ;
1001   F5EA             s_stat:		.ds	2	;scsi ending status
1002   F5EC             s_msg:		.ds	2	;scsi message
1003   F5EE             ;;
1004   F5EE             ;	scratch ram area for bdos use
1005   F5EE             begdat	.equ	$	 	;beginning of data area
1006   F5EE             ;
1007   F5EE             all00:	.ds	64	 	;allocation vector 0 (floppy)
1008   F62E             all01:	.ds	64	 	;allocation vector 1 (floppy)
1009   F66E             all02:	.ds	128	 	;allocation vector 2 (hard)
1010   F6EE             all03:	.ds	128	 	;allocation vector 3 (hard)
1011   F76E             ;
1012   F76E             chk00:	.ds	64		;check vector 0
1013   F7AE             chk01:	.ds	64		;check vector 1
1014   F7EE             chk02:	.ds	64	 	;check vector 2 (not used)
1015   F82E             chk03:	.ds	64	 	;check vector 3 (not used)
1016   F86E             ;
1017   F86E             dirbf:	.ds	128	 	;scratch directory area
1018   F8EE             ;
1019   F8EE             enddat	.equ	$	 	;end of data area
1020   F8EE             datsiz	.equ	$-begdat;	;size of data area
1021   F8EE             ;
1022   F8EE             dskbuf: .ds	512		;disk buffer for blocking/deblocking
1023   FAEE             ;
1024   FAEE             	.end
1025   FAEE             
tasm: Number of errors = 0
